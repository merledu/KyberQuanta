# -*- coding: utf-8 -*-
"""ntt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WV3iSHzcwu7SxZh6fAVrkkHMbCCX8TIG
"""

import random
def bit_reversal(i, k):
    bin_i = bin(i & (2**k - 1))[2:].zfill(k)
    return int(bin_i[::-1], 2)

def compute_ntt(coeffs):
    """
    Convert a polynomial to number-theoretic transform (NTT) form.
    The input is in standard order, the output is in bit-reversed order.
    """
    q=3329
    n = 256
    l = 128
    k = 1
    zetas = [pow(17, bit_reversal(i, 7), q) for i in range(128)]

    # Perform the NTT transformation
    while l >= 2:
        start = 0
        while start < n:
            zeta = zetas[k]
            k += 1
            for j in range(start, start + l):
                t = (zeta * coeffs[j + l]) % q
                coeffs[j + l] = (coeffs[j] - t) % q
                coeffs[j] = (coeffs[j] + t) % q 
            start = l + (j +1)
        l = l >> 1

    # Ensure the coefficients are in range [0, q)
    for j in range(n):
        coeffs[j] %= q
    return coeffs
